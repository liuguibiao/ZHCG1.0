var activityproperty = function () { function a() { } function b(a) { var b = null, d = []; if (a.sdata.performers && a.sdata.performers.length > 0) for (var e = 0; e < a.sdata.performers.length; e++) b = c(a.sdata.performers[e].id), b && d.push(b); return d } function c(a) { var b = null, d = null, d = kmain.mcurrentPackageData; if (d && d.participants) for (var e = 0; e < d.participants.length; e++) { var f = d.participants[e]; if (a === f.id) { b = { id: f.id, name: f.name, code: f.code, outerId: f.outerId }; break } } return b } return a.loadActivity = function () { $("#ddlComplexType").prop("selectedIndex", -1), $("#ddlMergeType").prop("selectedIndex", -1), $("#ddlCompareType").prop("selectedIndex", -1); var b = kgraph.mcurrentSelectedDomElement.node; if (b) { $("#txtActivityName").val(b.sdata.name), $("#txtActivityCode").val(b.sdata.code), $("#txtDescription").val(b.sdata.description), a.getActivityPerformer(b); var c = b.type(); c === kgraph.Config.NODE_TYPE_MULTIPLEINSTANCE ? ($("#divMultipleInstanceContent").show(), $("#ddlComplexType").val(b.sdata.complexType), $("#ddlMergeType").val(b.sdata.mergeType), $("#ddlCompareType").val(b.sdata.compareType), $("#txtCompleteOrder").val(b.sdata.completeOrder)) : $("#divMultipleInstanceContent").hide() } }, a.getActivityPerformer = function (a) { function f() { var a = d.api.getSelectedRows(); a.forEach(function (a, b) { kmain.mselectedActivityPerformerGUID = a.id }) } var c = document.querySelector("#myPerformerGrid"); $(c).empty(); var d = { columnDefs: [{ headerName: "ID", field: "id", width: 160 }, { headerName: "角色名称", field: "name", width: 160 }, { headerName: "角色代码", field: "code", width: 160 }], rowSelection: "single", onSelectionChanged: f }; new agGrid.Grid(c, d); var e = b(a); d.api.setRowData(e) }, a.saveActivity = function () { var a = $("#txtActivityName").val(), b = $("#txtActivityCode").val(), c = $("#txtDescription").val(), d = kgraph.mcurrentSelectedDomElement.node; if (d) { d.sdata.name = a, d.sdata.code = b, d.sdata.description = c; var e = d.type(); e === kgraph.Config.NODE_TYPE_MULTIPLEINSTANCE && (d.sdata.complexType = $("#ddlComplexType").val(), d.sdata.mergeType = $("#ddlMergeType").val(), d.sdata.compareType = $("#ddlCompareType").val(), d.sdata.completeOrder = $("#txtCompleteOrder").val()), d.setNodeName(a) } }, a.addPerformer = function () { kmain.mselectedParticipantType = null, kmain.mselectedParticipantItem = null, BootstrapDialog.show({ title: "角色列表", message: $("<div></div>").load("role/list") }) }, a.syncActivityPerformers = function (b, c) { var d = kgraph.mcurrentSelectedDomElement.node, e = d.sdata.performers; e || (e = d.sdata.performers = []); for (var f = kmain.mcurrentPackageData, g = f.participants, h = null, i = 0; i < g.length; i++) if ("role" === b && "Role" === g[i].type && c.ID === g[i].outerId) { h = g[i]; break } if (h) { for (var j = !1, i = 0; i < e.length; i++) if (h.id === e[i].id) { j = !0; break } if (j) $.msgBox({ title: "Desinger / ActivityProperty", content: "要添加的角色或用户数据已经存在！", type: "info" }); else { var k = { id: h.id, name: h.name, code: h.code, outerId: h.outerId }; d.sdata.performers.push(k), a.getActivityPerformer(d) } } else if ("role" === b) { var l = { id: jshelper.getUUID(), type: "Role", name: c.RoleName, code: c.RoleCode, outerId: c.ID }; kmain.mgraphView.packageData.participants.push(l); var k = { id: l.id, name: l.name, code: l.code, outerId: l.outerId }; d.sdata.performers.push(k), a.getActivityPerformer(d) } }, a.delPerformer = function () { var b = kmain.mselectedActivityPerformerGUID, c = kgraph.mcurrentSelectedDomElement.node, d = c.sdata.performers; c.sdata.performers = jQuery.grep(d, function (a) { return a.id !== b }), a.getActivityPerformer(c) }, a }(), gatewayproperty = function () { function a() { } return a.splitOptions = [{ value: "AndSplit", text: "与分支" }, { value: "OrSplit", text: "或分支" }], a.joinOptions = [{ value: "AndJoin", text: "与合并" }, { value: "OrJoin", text: "或合并" }], a.appendDirectionType = function (b) { $("#ddlDirectionType").empty().append('<option value="default" selected>--请选择--</option>'); var c = null; if ("Split" == b) for (var d = 0; d < a.splitOptions.length; d++) c = a.splitOptions[d], $("#ddlDirectionType").append($("<option></option>").attr("value", c.value).text(c.text)); else if ("Join" == b) for (var d = 0; d < a.joinOptions.length; d++) c = a.joinOptions[d], $("#ddlDirectionType").append($("<option></option>").attr("value", c.value).text(c.text)) }, a.loadGatewayInformation = function () { var b = kgraph.mcurrentSelectedDomElement.node; if (b && ($("#txtDescription").val(b.sdata.description), b.sdata.gatewaySplitJoinType)) { var c = b.sdata.gatewaySplitJoinType; $("#ddlGatewayType").val(c), b.sdata.gatewayDirection && (a.appendDirectionType(c), $("#ddlDirectionType").val(b.sdata.gatewayDirection)) } $("#ddlGatewayType").change(function () { var b = $("#ddlGatewayType").val(); a.appendDirectionType(b) }) }, a.saveGatewayInformation = function () { var a = $("#txtDescription").val(), b = $("#ddlGatewayType").val(), c = $("#ddlDirectionType").val(); if ("default" == b) return void $.msgBox({ title: "Designer / GatewayProperty", content: "请重新选择分支合并类型！", type: "info" }); if ("default" == c) return void $.msgBox({ title: "Designer / GatewayProperty", content: "请重新选择分支合并的子类型！", type: "info" }); var d = kgraph.mcurrentSelectedDomElement.node; d && (d.sdata.description = a, d.sdata.gatewaySplitJoinType = b, d.sdata.gatewayDirection = c) }, a }(), jsptoolkit = function () { function a() { } function h(b, c, d) { for (var e = 0; e < c.length; e++) { var h = b + c[e]; a.jspinstance.addEndpoint(b, f, { anchor: c[e], uuid: h }) } for (var i = 0; i < d.length; i++) { var j = b + d[i]; a.jspinstance.addEndpoint(b, g, { anchor: d[i], uuid: j }) } } a.jspinstance = null, a.init = function (b) { var c = a.jspinstance = jsPlumb.getInstance({ DragOptions: { cursor: "pointer", zIndex: 2e3 }, ConnectionOverlays: [["Arrow", { location: 1, visible: !0, width: 11, length: 11, id: "ARROW", events: { click: function () { alert("you clicked on the arrow overlay") } } }], ["Label", { location: .4, id: "label", cssClass: "aLabel", events: { tap: function () { } } }]], Container: b }), d = { connector: "StateMachine", paintStyle: { stroke: "red", strokeWidth: 4 }, hoverPaintStyle: { stroke: "blue" } }; c.registerConnectionType("basic", d), c.batch(function () { c.bind("click", function (a, b) { a.toggleType("basic") }) }) }; var b = ["Flowchart", { stub: [2, 2], gap: 1, cornerRadius: 5, alwaysRespectStubs: !0 }], c = { strokeWidth: 2, stroke: "#61B7CF", joinstyle: "round", outlineStroke: "white", outlineWidth: 2 }, d = { strokeWidth: 3, stroke: "#216477", outlineWidth: 5, outlineStroke: "white" }, e = { fill: "#216477", stroke: "#216477" }, f = { endpoint: "Dot", paintStyle: { stroke: "#7AB02C", fill: "transparent", radius: 4, strokeWidth: 1 }, isSource: !0, connector: b, connectorStyle: c, hoverPaintStyle: e, connectorHoverStyle: d, maxConnections: 10, dragOptions: {}, overlays: [["Label", { location: [.5, 1.5], label: "Drag", cssClass: "endpointSourceLabel", visible: !1 }]] }, g = { endpoint: "Dot", paintStyle: { fill: "#7AB02C", radius: 4 }, hoverPaintStyle: e, maxConnections: -1, dragOptions: { hoverClass: "hover", activeClass: "active" }, isTarget: !0, overlays: [["Label", { location: [.5, -.5], label: "Drop", cssClass: "endpointTargetLabel", visible: !1 }]] }; return a.addEndpointsTask = function (a) { h(a, ["RightMiddle"], ["LeftMiddle"]) }, a.addEndpointsStart = function (a) { h(a, ["RightMiddle"], []) }, a.addEndpointsEnd = function (a) { h(a, [], ["LeftMiddle"]) }, a.addEndpointsGateway = function (a) { h(a, ["RightMiddle"], ["LeftMiddle"]) }, a.bindConnectionEvents = function (b) { function c(a, c) { for (var d = null, e = b.packageData.process.slines, f = 0; f < e.length; f++) if (e[f].from === a && e[f].to === c) { d = e[f]; break } return d } function d(a, d) { for (var e = null, f = c(a, d), g = 0; g < b.lines.length; g++) if (f.id === b.lines[g].id()) { e = b.lines[g]; break } return e } a.jspinstance.bind("connection", function (b, e) { var f = b.source.id.substr(3, b.source.id.length - 3), g = b.target.id.substr(3, b.target.id.length - 3), h = c(f, g); if (null === h) { var i = a.getConnectionAnchors(b.connection); if (h = { id: jshelper.getUUID(), from: f, to: g, description: "", anchors: i, sourceId: b.connection.sourceId, targetId: b.connection.targetId, fromConnector: 1, toConnector: 1 }, kmain.mgraphView) { var j = kmain.mgraphView.packageData.process.slines; j.push(h); var k = new kgraph.Line(h); kmain.mgraphView.lines.push(k) } } b.connection.bind("click", function (a, c) { var e = b.source.id.substr(3, b.source.id.length - 3), f = b.target.id.substr(3, b.target.id.length - 3), g = d(e, f); kgraph.mcurrentSelectedDomElement = { type: kgraph.Config.ELEMENT_TYPE_CONNECTION, connection: a, line: g }, $(".popmenu").hide(); var h = c.clientX, i = c.clientY; $("#divPopMenuCommand").css({ left: h, top: i }).show(), c.stopPropagation() }).bind("dblclick", function (a, b) { kmain.showTransitionPropertyDialog() }).bind("mouseover", function (a, b) { }) }) }, a.connect = function (b) { var c = a.jspinstance.connect({ uuids: [b.sdata.sourceId + "RightMiddle", b.sdata.targetId + "LeftMiddle"], anchors: b.sdata.anchors }); return a.setConnectionText(c, b.description()), c }, a.getConnectionAnchors = function (a) { var b = $.map(a.endpoints, function (a) { return [[a.anchor.x, a.anchor.y, a.anchor.orientation[0], a.anchor.orientation[1], a.anchor.offsets[0], a.anchor.offsets[1]]] }); return b }, a.setConnectionText = function (a, b) { a.getOverlay("label").setLabel(b) }, a.draggableSingleNode = function (b, c) { a.jspinstance.draggable(b, { grid: [1, 1], stop: function (a, d) { var e = parseInt($("#" + b).position().left, 10), f = parseInt($("#" + b).position().top, 10); c.left = e, c.top = f, c.type === kgraph.Config.NODE_TYPE_GATEWAY && (c.top += 9) } }) }, a.remove = function (b) { a.jspinstance.remove(b) }, a.detach = function (b) { a.jspinstance.detach(b) }, a.detachAll = function (b) { a.jspinstance.detachAllConnections(b) }, a.empty = function () { a.jspinstance.empty() }, a.clearCanvas = function () { a.jspinstance && (a.jspinstance.deleteEveryEndpoint(), a.jspinstance.detachEveryConnection(), a.jspinstance.empty("#kgraphCanvas"), $("#kgraphCanvas").empty()) }, a }(); jsPlumb.ready(function () { jsptoolkit.init("kgraphCanvas") }); var kgraph = function () { function a() { } return a.mcurrentSelectedDomElement = null, a.Config = { NODE_PREFIX: "ACT", NODE_TYPE_START: "StartNode", NODE_TYPE_TASK: "TaskNode", NODE_TYPE_END: "EndNode", NODE_TYPE_GATEWAY: "GatewayNode", NODE_TYPE_SUBPROCESS: "SubProcessNode", NODE_TYPE_MULTIPLEINSTANCE: "MultipleInstanceNode", NODE_TYPE_COMPLEX_SIGNTOGETHER: "SignTogether", NODE_TYPE_COMPLEX_SIGHFORWARD: "SignForward", ELEMENT_TYPE_NODE: "NODE", ELEMENT_TYPE_CONNECTION: "CONNECTION" }, a.drawSingleNode = function (b) { var c = { id: jshelper.getUUID(), code: "", type: b.type, complexType: b.complexType, left: b.left, top: b.top, inputConnectors: [], outputConnectors: [] }; if (b.type === a.Config.NODE_TYPE_START) c.name = "开始"; else if (b.type === a.Config.NODE_TYPE_END) c.name = "结束"; else if (b.type === a.Config.NODE_TYPE_GATEWAY) c.name = ""; else if (b.type === a.Config.NODE_TYPE_SUBPROCESS) c.name = "子流程"; else if (b.type === a.Config.NODE_TYPE_TASK) c.name = "任务"; else { if (b.type !== a.Config.NODE_TYPE_MULTIPLEINSTANCE) throw new Error("未知节点类型！"); c.name = "会(加)签" } var d = new a.Node(c); return kmain.mgraphView.processData.snodes.push(c), kmain.mgraphView.nodes.push(d), c }, a.Node = function (b) { this.sdata = b; var c = this; this.id = function () { return this.sdata.id }, this.name = function () { return this.sdata.name || "" }, this.code = function () { return this.sdata.code || "" }, this.text = function () { return this.sdata.text || "" }, this.type = function () { return this.sdata.type }, this.complexType = function () { return this.sdata.complexType }, this.left = function () { return this.sdata.left }, this.top = function () { return this.sdata.top }, this.width = function () { return this.sdata.width }, this.height = function () { return this.sdata.height }, this.setNodeName = function (b) { var c = a.Config.NODE_PREFIX + this.id(); $("#" + c).text(b) }, this.render = function () { var d = null, e = a.Config.NODE_PREFIX + this.id(), f = this.type(); if (f === a.Config.NODE_TYPE_START) d = this.renderStartNode(e, this); else if (f === a.Config.NODE_TYPE_END) d = this.renderEndNode(e, this); else if (f === a.Config.NODE_TYPE_TASK || f === a.Config.NODE_TYPE_MULTIPLEINSTANCE) d = this.renderTaskNode(e, this); else if (f === a.Config.NODE_TYPE_GATEWAY) d = this.renderGatewayNode(e, this); else { if (f !== a.Config.NODE_TYPE_SUBPROCESS) throw new Error("未知节点类型！"); d = this.renderSubProcessNode(e, this) } this.sdata.width = d.width(), this.sdata.height = d.height(), d.bind("mousedown", function (a) { a.stopPropagation() }).bind("click", function (b) { $(".popmenu").hide(), a.mcurrentSelectedDomElement = { type: a.Config.ELEMENT_TYPE_NODE, node: c, element: this }; var e = $("#kgraphCanvas").position().left + d.position().left + d.width() + 30, f = $("#kgraphCanvas").position().top + d.position().top, g = a.mcurrentSelectedDomElement.node.sdata, h = $("#divPopMenu"); g.type === a.Config.NODE_TYPE_END && (h = $("#divPopMenuCommand")), h.css({ left: e, top: f }).show(), b.stopPropagation() }).bind("dblclick", function () { kmain.showActivityProperty(c) }), jsptoolkit.draggableSingleNode(e, b) }, this.renderTaskNode = function (a, b) { var c = $("<div>").attr("id", a).addClass("task").addClass("gnode"); return c.text(b.name()).css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }).appendTo($("#kgraphCanvas")), jsptoolkit.addEndpointsTask(a), c }, this.renderGatewayNode = function (a, b) { var c = $("<div>").addClass("ctrl_container"), d = $("<div>").addClass("decision").addClass("gnode").attr("id", a).css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }); return d.append(c).appendTo($("#kgraphCanvas")), jsptoolkit.addEndpointsGateway(a), d }, this.renderSubProcessNode = function (a, b) { var c = $("<div>").attr("id", a).addClass("task").addClass("gnode"); return c.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }).text(b.name()).appendTo($("#kgraphCanvas")), jsptoolkit.addEndpointsTask(a), c }, this.renderStartNode = function (a, b) { var c = $("<div>").attr("id", a).addClass("circle-start").addClass("gnode"); return c.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }).appendTo($("#kgraphCanvas")), jsptoolkit.addEndpointsStart(a), c }, this.renderEndNode = function (a, b) { var c = $("<div>").attr("id", a).addClass("circle-end").addClass("gnode"); return c.css({ left: this.sdata.left, top: this.sdata.top, position: "absolute" }).appendTo($("#kgraphCanvas")), jsptoolkit.addEndpointsEnd(a), c }, this.render() }, a.Line = function (a) { this.sdata = a, this.connection = null; this.id = function () { return this.sdata.id }, this.from = function () { return this.sdata.from }, this.to = function () { return this.sdata.to }, this.description = function () { return this.sdata.description }, this.render = function () { this.connection = jsptoolkit.connect(this) } }, a.GraphView = function (b) { function d(b) { var c = null, d = []; if (b) for (var e = 0; e < b.length; e++) c = new a.Node(b[e]), d.push(c); return d } function e(b) { var c = null, d = []; if (b) for (var e = 0; e < b.length; e++) c = new a.Line(b[e]), c.render(), d.push(c); return d } this.processGUID = b.processGUID, this.packageData = b.packageData, this.processData = b.packageData.process, jsptoolkit.bindConnectionEvents(this), this.nodes = d(this.processData.snodes), this.lines = e(this.processData.slines) }, a }(), kloader = function () { function a() { } return a.createNew = function (a) { var b = {}, c = {}, d = [{ id: jshelper.getUUID(), name: "", code: "start", type: "StartNode", left: 370, top: 70, width: 50, height: 50, inputConnectors: [{ type: "input", index: 1, name: "A" }], outputConnectors: [{ type: "output", index: 1, name: "X" }] }, { id: jshelper.getUUID(), name: "", code: "end", type: "EndNode", left: 370, top: 370, width: 50, height: 50, inputConnectors: [{ type: "input", index: 1, name: "A" }], outputConnectors: [{ type: "output", index: 1, name: "X" }] }]; b.process = c, c.id = a.ProcessGUID, c.name = a.ProcessName, c.description = a.Description, c.snodes = d; var e = new kgraph.GraphView(a.ProcessGUID, b); return e }, a.initialize = function (a) { var b = {}, c = {}, d = [], e = $.parseXML(a.XmlContent); b.participants = d, b.process = c, $(e).find("Participant").each(function (a) { var b = {}; b.type = $(this).attr("type"), b.id = $(this).attr("id"), b.name = $(this).attr("name"), b.code = $(this).attr("code"), b.outerId = $(this).attr("outerId"), d.push(b) }); var f = $(e).find("Process"); if (f) { var g = [], h = []; c.name = $(f).attr("name"), c.id = $(f).attr("id"); var i = $(f).children("Description"); c.description = jshelper.replaceHTMLTags($(i).text()), c.snodes = g, c.slines = h, $(f).find("Activity").each(function (a) { var b = this, c = {}, d = {}, e = [], f = {}, h = {}, i = {}; c.id = $(b).attr("id"), c.name = $(b).attr("name"), c.code = $(b).attr("code"), c.text = ""; var j = $(b).find("Description"); c.description = jshelper.replaceHTMLTags($(j).text()), d = $(b).find("ActivityType"), c.type = $(d).attr("type"), "GatewayNode" == c.type ? (c.gatewaySplitJoinType = $(d).attr("gatewaySplitJoinType"), c.gatewayDirection = $(d).attr("gatewayDirection")) : "SubProcessNode" == c.type ? c.subId = $(d).attr("subId") : "MultipleInstanceNode" == c.type && (c.complexType = $(d).attr("complexType"), c.mergeType = $(d).attr("mergeType"), c.compareType = $(d).attr("compareType"), c.completeOrder = $(d).attr("completeOrder")), $(b).find("Performer").each(function (a) { var b = this, c = {}; c.id = $(b).attr("id"), e.push(c) }), c.performers = e, f = $(b).find("Geography"), h = $(f).find("Widget"); var k = [], l = []; c.inputConnectors = k, c.outputConnectors = l, c.left = parseInt($(h).attr("left")), c.top = parseInt($(h).attr("top")), c.width = parseInt($(h).attr("width")), c.height = parseInt($(h).attr("height")), i = $(h).find("Connectors"), $(i).find("Connector").each(function (a) { var b = this, d = {}; d.type = $(b).attr("type"), d.index = $(b).attr("index"), d.name = $(b).attr("name"); var e = $(b).attr("type"); "input" == e ? c.inputConnectors.push(d) : "output" == e && c.outputConnectors.push(d) }), g.push(c) }), $(e).find("Transition").each(function (a) { var b = {}; b.id = $(this).attr("id"), b.from = $(this).attr("from"), b.to = $(this).attr("to"); var c = $(this).find("Description"); b.description = jshelper.replaceHTMLTags($(c).text()); var d = {}, e = $(this).find("Receiver"), f = $(e).attr("type"); void 0 !== f && (d.type = f), b.receiver = d; var g = {}, i = $(this).find("Condition"), j = $(i).attr("type"); if (void 0 !== j) { g.type = j; $(this).find("ConditionText"); g.text = jshelper.replaceHTMLTags($(i).text()) } b.condition = g; var l = $(this).find("Geography"), m = $(l).find("Line"), n = $(m).attr("anchors"); void 0 !== n && "undefined" !== n && (b.anchors = $.parseJSON(n)), b.sourceId = $(m).attr("sourceId"), b.targetId = $(m).attr("targetId"), b.fromConnector = $(m).attr("fromConnector"), b.toConnector = $(m).attr("toConnector"), h.push(b) }) } var j = { processGUID: a.ProcessGUID, version: a.Version, packageData: b }, k = new kgraph.GraphView(j); return k }, a.serialize2Xml = function (a, b) { var c = {}, d = new XMLWriter("utf-8", "1.0"); d.formatting = "indented", d.indentChar = " ", d.indentation = 2, d.writeStartDocument(void 0), d.writeStartElement("Package"); var e = b.participants; if (e) { var f = e.length; if (f > 0) { d.writeStartElement("Participants"); for (var g = 0; g < f; g++) { var h = e[g]; d.writeStartElement("Participant"), d.writeAttributeString("type", h.type), d.writeAttributeString("id", h.id), d.writeAttributeString("name", h.name), d.writeAttributeString("code", h.code), d.writeAttributeString("outerId", h.outerId), d.writeEndElement() } d.writeEndElement() } } var i = b.process; d.writeStartElement("WorkflowProcesses"), d.writeStartElement("Process"), d.writeAttributeString("name", i.name), d.writeAttributeString("id", i.id), i.description && d.writeElementString("Description", jshelper.escapeHtml(i.description)); var j = $(".gnode").length; j > 0 && (d.writeStartElement("Activities"), $(".gnode").each(function (a, b) { var c = $(b), e = c.attr("id"), f = $.grep(i.snodes, function (a) { return "ACT" + a.id == e })[0]; if (d.writeStartElement("Activity"), d.writeAttributeString("name", f.name), d.writeAttributeString("id", f.id), d.writeAttributeString("code", f.code), f.description && d.writeElementString("Description", jshelper.escapeHtml(f.description)), d.writeStartElement("ActivityType"), d.writeAttributeString("type", f.type), "GatewayNode" == f.type ? (d.writeAttributeString("gatewaySplitJoinType", f.gatewaySplitJoinType), d.writeAttributeString("gatewayDirection", f.gatewayDirection)) : "SubProcessNode" == f.type ? d.writeAttributeString("subId", f.subId) : "MultipleInstanceNode" == f.type && (d.writeAttributeString("complexType", f.complexType), d.writeAttributeString("mergeType", f.mergeType), d.writeAttributeString("compareType", f.compareType), d.writeAttributeString("completeOrder", f.completeOrder)), d.writeEndElement(), f.performers) { var g = f.performers.length; if (g > 0) { d.writeStartElement("Performers"); for (var h = 0; h < g; h++) { var j = f.performers[h]; d.writeStartElement("Performer"), d.writeAttributeString("id", j.id), d.writeEndElement() } d.writeEndElement() } } d.writeStartElement("Geography"), d.writeStartElement("Widget"), d.writeAttributeString("left", f.left), d.writeAttributeString("top", f.top), d.writeAttributeString("width", f.width), d.writeAttributeString("height", f.height); var k = f.inputConnectors.length, l = f.outputConnectors.length; if (k > 0 || l > 0) { if (d.writeStartElement("Connectors"), k > 0) for (var m = 0; m < k; m++) { var n = f.inputConnectors[m]; d.writeStartElement("Connector"), d.writeAttributeString("type", n.type), d.writeAttributeString("index", n.index), d.writeAttributeString("name", n.name), d.writeEndElement() } if (l > 0) for (var o = 0; o < l; o++) { var n = f.outputConnectors[o]; d.writeStartElement("Connector"), d.writeAttributeString("type", n.type), d.writeAttributeString("index", n.index), d.writeAttributeString("name", n.name), d.writeEndElement() } d.writeEndElement() } d.writeEndElement(), d.writeEndElement(), d.writeEndElement() }), d.writeEndElement()); var k = jsptoolkit.jspinstance.getConnections(); return k.length > 0 && (d.writeStartElement("Transitions"), $.each(k, function (a, b) { var c = b.sourceId, e = b.targetId, f = jsptoolkit.getConnectionAnchors(b), g = $.grep(i.slines, function (a) { return a.sourceId == c && a.targetId == e })[0]; d.writeStartElement("Transition"), d.writeAttributeString("id", g.id), d.writeAttributeString("from", g.from), d.writeAttributeString("to", g.to), g.description && d.writeElementString("Description", jshelper.escapeHtml(g.description)), g.receiver && (d.writeStartElement("Receiver"), g.receiver.type && d.writeAttributeString("type", g.receiver.type), d.writeEndElement()), g.condition && (d.writeStartElement("Condition"), g.condition.type && (d.writeAttributeString("type", g.condition.type), g.condition.text && (d.writeStartElement("ConditionText"), d.writeCDATA($.trim(g.condition.text)), d.writeEndElement())), d.writeEndElement()), d.writeStartElement("Geography"), d.writeStartElement("Line"), d.writeAttributeString("anchors", JSON.stringify(f)), d.writeAttributeString("sourceId", g.sourceId), d.writeAttributeString("targetId", g.targetId), d.writeAttributeString("fromConnector", g.fromConnector), d.writeAttributeString("toConnector", g.fromConnector), d.writeEndElement(), d.writeEndElement(), d.writeEndElement() }), d.writeEndElement()), d.writeEndElement(), d.writeEndElement(), d.writeEndElement(), d.writeEndDocument(), c.ProcessGUID = a, c.XmlContent = d.flush(), d.close(), c }, a }(), kmain = function () { function a() { } function b() { $(".progress .progress-bar").progressbar({ transition_delay: 200 }); var a = $(".js-loading-bar"); a.find(".bar"); a.modal("show"), setTimeout(function () { a.modal("hide") }, 500) } function c() { $("body").click(function (a) { $(".popmenu").hide() }).keyup(function (b) { return "kgraphCanvas" == b.target.id && void (46 === b.keyCode && null !== kgraph.mcurrentSelectedDomElement && a.removeCanvasElement()) }) } function d() { $(".imagepart").draggable({ helper: "clone", scope: "dragflag" }) } function e() { $("#kgraphCanvas").droppable({ accept: ".imagepart", activeClass: "drop-active", scope: "dragflag", cursor: "cross", drop: function (b, c) { var d = parseInt(c.offset.left - $(this).offset().left, 10), e = parseInt(c.offset.top - $(this).offset().top, 10), f = c.draggable[0].id, g = { type: f, left: d, top: e }; return void 0 === a.mgraphView ? void $.msgBox({ title: "Designer / Index", content: "请先打开流程记录！", type: "info" }) : void kgraph.drawSingleNode(g) } }) } function h(b, c) { var d = c.ProcessGUID; a.setSelectedProcessGUIDCurrent(d); var e = a.mselectedProcessVersion, f = { processGUID: d, processVersion: e }; a.misSelectedNew && d && processapi.queryProcessFile(f, function (b) { if (1 === b.Status) { jsptoolkit.clearCanvas(); var c = b.Entity; a.mgraphView = kloader.initialize(c), a.mcurrentPackageData = a.mgraphView.packageData, a.mcurrentXmlContent = c.XmlContent } else $.msgBox({ title: "Designer / Process", content: "流程定义记录读取失败！错误：" + b.Message, type: "error" }) }) } a.mselectedActivityPerformerGUID = "", a.mselectedParticipantType = null, a.mselectedParticipantItem = null, a.mcurrentXmlContent = "", a.init = function () { b(), c(), d(), e(), $("#kgraphCanvas").on("click", function (a) { $(this).focus() }), $.fn.modal.Constructor.prototype.enforceFocus = function () { }, processlist.beforeRender.subscribe(h) }, a.addNewNodeWithConnection = function (a, b) { var c = parseInt(a.clientX - a.offsetX, 10), d = parseInt(a.clientY - a.offsetY, 10), e = { type: b, left: c, top: d }, f = kgraph.drawSingleNode(e), g = kgraph.mcurrentSelectedDomElement.node.sdata, h = { sourceId: "ACT" + g.id, targetId: "ACT" + f.id, anchors: [[1, .5, 0, 0, 5, 0], [0, .5, 0, 0, 0, 0]], description: "" }, i = new kgraph.Line(h); i.render() }, a.removeCanvasElement = function () { kgraph.mcurrentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_NODE ? $.msgBox({ title: "Are You Sure", content: "确认要删除节点吗? 将会删除节点属性等数据!!!", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (a) { if ("Yes" === a) return jsptoolkit.remove(kgraph.mcurrentSelectedDomElement.element), f(kgraph.mcurrentSelectedDomElement.node), void (kgraph.mcurrentSelectedDomElement = null) } }) : kgraph.mcurrentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_CONNECTION && $.msgBox({ title: "Are You Sure", content: "确认要删除连线吗? 将会删除连线上的条件等数据!!!", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (a) { if ("Yes" === a) return jsPlumb.detach(kgraph.mcurrentSelectedDomElement.connection), g(kgraph.mcurrentSelectedDomElement.line), void (kgraph.mcurrentSelectedDomElement = null) } }) }; var f = function (b) { for (var c = b.id(), d = [], e = [], f = a.mgraphView.lines, g = a.mgraphView.processData.slines, h = 0; h < f.length; h++) c !== f[h].from() && c !== f[h].to() || e.push(h); for (var h = e.length - 1; h >= 0; h--) f.splice(e[h], 1); for (var h = 0; h < g.length; h++) c !== g[h].from && c !== g[h].to || d.push(h); for (var h = d.length - 1; h >= 0; h--) g.splice(d[h], 1); for (var i = a.mgraphView.nodes, h = 0; h < i.length; h++) if (c === i[h].id()) { i.splice(h, 1); break } for (var j = a.mgraphView.processData.snodes, h = 0; h < j.length; h++) if (c === j[h].id) { j.splice(h, 1); break } }, g = function (b) { for (var d = b.id(), e = a.mgraphView.lines, f = a.mgraphView.processData.slines, g = 0; g < e.length; g++) if (d === e[g].id()) { e.splice(g, 1); break } for (var g = 0; g < f.length; g++) if (d === f[g].id) { f.splice(g, 1); break } }; return a.createProcess = function () { processlist.createProcess() }, a.openProcess = function () { BootstrapDialog.show({ title: "流程列表", message: $("<div></div>").load("process/list") }) }, a.setSelectedProcessGUIDCurrent = function (b) { a.mselectedProcessGUIDCurrent !== b ? (a.mselectedProcessGUIDPrevious = a.mselectedProcessGUIDCurrent, a.mselectedProcessGUIDCurrent = b, a.misSelectedNew = !0) : a.misSelectedNew = !1 }, a.saveProcessFile = function () { if (void 0 !== a.mgraphView) { var b = a.mgraphView.processGUID, c = a.mgraphView.packageData, d = kloader.serialize2Xml(b, c); a.mcurrentXmlContent = d.XmlContent, processapi.saveProcessFile(d) } else $.msgBox({ title: "Designer / Index", content: "请确认图形是否处于编辑状态！", buttons: [{ value: "Ok" }] }) }, a.setting = function () { BootstrapDialog.show({ title: "系统参数设置", message: $("<div>你可以在这个页面设置一些参数。。。</div>"), buttons: [{ label: "确定", cssClass: "btn-primary", action: function (a) { a.close() } }] }) }, a.exportXML = function () { var b = $("<div></div>"); $('<textarea style="width:540px;min-height:280px;"/>').val(a.mcurrentXmlContent).appendTo(b); BootstrapDialog.show({ title: "XML文件内容", message: b, buttons: [{ label: "关闭", cssClass: "btn-primary", action: function (a) { a.close() } }] }) }, a.showActivityProperty = function () { if (kgraph.mcurrentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_NODE) { var b = kgraph.mcurrentSelectedDomElement.node; b.sdata.type && a.showPropertyDialogCase("activity", b) } else if (kgraph.mcurrentSelectedDomElement.type === kgraph.Config.ELEMENT_TYPE_CONNECTION) { var c = kgraph.mcurrentSelectedDomElement.line; a.showPropertyDialogCase("transition", c) } }, a.showPropertyDialogCase = function (a, b) { if ("activity" === a) { if (b.type() === kgraph.Config.NODE_TYPE_TASK || b.type() === kgraph.Config.NODE_TYPE_MULTIPLEINSTANCE) BootstrapDialog.show({ title: "活动属性", message: $("<div></div>").load("activity/edit"), data: { node: b } }); else if (b.type() === kgraph.Config.NODE_TYPE_GATEWAY) BootstrapDialog.show({ title: "网关决策属性", message: $("<div></div>").load("activity/gateway"), data: { node: b } }); else if (b.type() === kgraph.Config.NODE_TYPE_SUBPROCESS) BootstrapDialog.show({ title: "子流程属性", message: $("<div></div>").load("activity/subprocess"), data: { node: b } }); else if (b.type() !== kgraph.Config.NODE_TYPE_START && b.type() !== kgraph.Config.NODE_TYPE_END) return $.msgBox({ title: "Designer / Property", content: "未知节点类型！" + b.type(), type: "alert" }), !1 } else BootstrapDialog.show({ title: "转移属性", message: $("<div></div>").load("transition/edit"), data: { node: b } }) }, a }(), processlist = function () { function a() { } return a.pselectedProcessGUID = "", a.pselectedProcessDataRow = null, a.beforeRender = new slick.Event, a.getProcessList = function () { $("#loading-indicator").show(), jshelper.ajaxGet("api/Wf2Xml/GetProcessListSimple", null, function (b) { function e() { var b = d.api.getSelectedRows(), c = 0; b.forEach(function (b, d) { c = b.ID, a.pselectedProcessGUID = b.ProcessGUID, a.pselectedProcessDataRow = b }) } function f(b, c) { a.editProcess() } if (1 === b.Status) { var c = document.querySelector("#myProcessGrid"); $(c).empty(); var d = { columnDefs: [{ headerName: "ID", field: "ID", width: 50 }, { headerName: "流程GUID", field: "ProcessGUID", width: 120 }, { headerName: "流程名称", field: "ProcessName", width: 160 }, { headerName: "版本", field: "Version", width: 40 }, { headerName: "状态", field: "IsUsing", width: 60 }, { headerName: "创建日期", field: "CreatedDateTime", width: 120 }], rowSelection: "single", onSelectionChanged: e, onRowDoubleClicked: f }; new agGrid.Grid(c, d), d.api.setRowData(b.Entity), $("#loading-indicator").hide() } }) }, a.createProcess = function () { a.pselectedProcessGUID = "", BootstrapDialog.show({ title: "流程新建", message: $("<div></div>").load("process/edit") }) }, a.loadProcess = function () { var b = a.pselectedProcessDataRow; "" != a.pselectedProcessGUID ? ($("#txtProcessGUID").val(b.ProcessGUID), $("#txtProcessName").val(b.ProcessName), $("#txtVersion").val(b.Version), $("#ddlIsUsing").val(b.IsUsing), $("#txtDescription").val(b.Description)) : ($("#txtProcessGUID").val(""), $("#txtProcessName").val(""), $("#txtVersion").val("1"), $("#ddlIsUsing").val(), $("#txtDescription").val("")) }, a.editProcess = function () { var b = a.pselectedProcessDataRow; return null == b ? ($.msgBox({ title: "Designer / Process", content: "请先选择流程记录！", type: "alert" }), !1) : void BootstrapDialog.show({ title: "流程编辑", message: $("<div></div>").load("process/edit") }) }, a.saveProcess = function () { if ("" == $("#txtProcessName").val() || "" == $("#txtVersion").val()) return $.msgBox({ title: "Designer / Process", content: "请输入流程基本信息！", type: "alert" }), !1; var b = { ProcessGUID: $("#txtProcessGUID").val(), ProcessName: $("#txtProcessName").val(), Version: $("#txtVersion").val(), IsUsing: $("#ddlIsUsing").val(), Description: $("#txtDescription").val() }; "" == a.pselectedProcessGUID ? processapi.create(b, function (b) { 1 == b.Status && (a.pselectedProcessGUID = b.Entity.ProcessGUID, a.beforeRender && slick.trigger(a.beforeRender, { ProcessGUID: a.pselectedProcessGUID })) }) : processapi.update(b) }, a.deleteProcess = function () { $.msgBox({ title: "Are You Sure", content: "确实要删除流程定义记录吗? ", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (b) { if ("Yes" == b) { var c = { ProcessGUID: a.pselectedProcessGUID, Version: 1 }; return void processapi.delete(c) } } }) }, a.sure = function () { "" != a.pselectedProcessGUID && a.beforeRender && slick.trigger(a.beforeRender, { ProcessGUID: a.pselectedProcessGUID }) }, a }(), processapi = function () { function a() { } return a.create = function (a, b) { jshelper.ajaxPost("api/Wf2Xml/CreateProcess", JSON.stringify(a), function (a) { 1 == a.Status ? $.msgBox({ title: "Designer / Process", content: "流程记录已经成功创建，可以在主面板创建图形了！", type: "info" }) : $.msgBox({ title: "Designer / Process", content: a.Message, type: "error", buttons: [{ value: "Ok" }] }), b(a) }) }, a.update = function (a) { jshelper.ajaxPost("api/Wf2Xml/UpdateProcess", JSON.stringify(a), function (a) { 1 == a.Status ? $.msgBox({ title: "Designer / Process", content: "流程成功保存！", type: "info" }) : $.msgBox({ title: "Ooops", content: a.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, a.delete = function (a) { jshelper.ajaxPost("api/Wf2Xml/DeleteProcess", JSON.stringify(a), function (a) { 1 == a.Status ? ($.msgBox({ title: "Designer / Process", content: "流程记录已经删除！", type: "info" }), processlist.getProcessList()) : $.msgBox({ title: "Ooops", content: a.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, a.queryProcessFile = function (a, b) { jshelper.ajaxPost("api/Wf2Xml/QueryProcessFile", JSON.stringify(a), function (a) { b(a) }) }, a.saveProcessFile = function (a) { jshelper.ajaxPost("api/Wf2Xml/SaveProcessFile", JSON.stringify(a), function (a) { "1" == a.Status ? $.msgBox({ title: "Designer / Index", content: "流程XML内容保存成功！", type: "info" }) : $.msgBox({ title: "Designer / Index", content: "流程XML内容保存失败！错误信息：" + a.Message, type: "info" }) }) }, a }(), rolelist = function () {
	function a() { } var b = "", c = null; return a.getRoleList = function () {
		var a = "api/Wf2Xml/GetRoleAll"; jshelper.ajaxGet(a, null, function (a) {
			function f() { var a = e.api.getSelectedRows(); a.forEach(function (a, d) { b = "role", c = a }) } if (1 == a.Status) {
				var d = document.querySelector("#myRoleGrid"), e = {
					columnDefs: [{
						headerName: "ID", field: "ID",
						width: 60
					}, { headerName: "角色名称", field: "RoleName", width: 200 }, { headerName: "角色代码", field: "RoleCode", width: 200 }], rowSelection: "single", onSelectionChanged: f
				}; new agGrid.Grid(d, e), e.api.setRowData(a.Entity)
			}
		})
	}, a.sure = function () { "" != b && null != c ? (kmain.mselectedParticipantType = b, kmain.mselectedParticipantItem = c, activityproperty.syncActivityPerformers(kmain.mselectedParticipantType, kmain.mselectedParticipantItem)) : $.msgBox({ title: "Designer / Role", content: "请选择角色记录！", type: "alert" }) }, a
}(), subprocessmanager; subprocessmanager || (subprocessmanager = {}), function () { function c() { $.msgBox({ title: "Are You Sure", content: "请确认要将当前选中记录设置为子流程吗？！", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (c) { if ("Yes" == c) { $("#txtProcessGUID").val(a), $("#txtProcessName").val(b); var d = kgraph.mcurrentSelectedDomElement.node; return void (d.sdata.subId = a) } } }) } var a = null, b = null; return subprocessmanager.load = function () { var a = kgraph.mcurrentSelectedDomElement.node; null !== a && void 0 != a.sdata.subId && ($("#txtProcessGUID").val(a.sdata.subId), subprocessmanager.getProcess(a.sdata.subId)), subprocessmanager.getProcessList() }, subprocessmanager.getProcessList = function () { $("#spinner").show(), jshelper.ajaxGet("api/Wf2Xml/GetProcessListSimple", null, function (c) { function f() { var c = e.api.getSelectedRows(), d = 0; c.forEach(function (c, e) { d = c.ID, a = c.ProcessGUID, b = c.ProcessName }) } function g(a, b) { } if (1 === c.Status) { var d = document.querySelector("#mySubProcessGrid"), e = { columnDefs: [{ headerName: "ID", field: "ID", width: 50 }, { headerName: "流程GUID", field: "ProcessGUID", width: 120 }, { headerName: "流程名称", field: "ProcessName", width: 160 }, { headerName: "版本", field: "Version", width: 40 }, { headerName: "状态", field: "IsUsing", width: 60 }, { headerName: "创建日期", field: "CreatedDateTime", width: 120 }], rowSelection: "single", onSelectionChanged: f, onRowDoubleClicked: g }; new agGrid.Grid(d, e), e.api.setRowData(c.Entity), $("#loading-indicator").hide() } }) }, subprocessmanager.getProcess = function (a) { null !== a && "undefined" !== a && jshelper.ajaxGet("api/Wf2Xml/GetProcess/" + a, null, function (a) { if (1 == a.Status) { var b = a.Entity; $("#txtProcessName").val(b.ProcessName) } }) }, subprocessmanager.saveSubProcess = function () { c() }, subprocessmanager }(); var transitionproperty = function () { function a() { } return a.load = function () { var a = kgraph.mcurrentSelectedDomElement.line; a && ($("#txtDescription").val(a.sdata.description), a.sdata.receiver && a.sdata.receiver.type && $("#ddlReceiverType").val(a.sdata.receiver.type), a.sdata.condition && $("#txtCondition").val($.trim(a.sdata.condition.text))) }, a.save = function () { var a = $("#txtDescription").val(), b = {}, c = $("#ddlReceiverType").val(); "default" !== c && (b.type = c); var d = {}; d.type = "Expression", d.text = $.trim($("#txtCondition").val()); var e = kgraph.mcurrentSelectedDomElement.line; e.sdata.description = a, e.sdata.receiver = b, e.sdata.condition = d, jsptoolkit.setConnectionText(e.connection, e.sdata.description) }, a }();